name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write  # For test summary comments

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    # Hermetic test environment with Postgres + optional LocalStack
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: filedb
          POSTGRES_USER: fileuser
          POSTGRES_PASSWORD: testpassword
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U fileuser -d filedb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      # Optional: LocalStack for S3 integration tests
      # Uncomment if your tests hit S3
      # localstack:
      #   image: localstack/localstack:3
      #   env:
      #     SERVICES: s3
      #     LS_LOG: warn
      #   ports:
      #     - 4566:4566
      #   options: >-
      #     --health-cmd="curl -s http://localhost:4566/health | grep 's3'"
      #     --health-interval=5s
      #     --health-timeout=2s
      #     --health-retries=30

    steps:
      # ===== Setup =====
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'
          cache: gradle

      # ===== Build & Test =====
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        env:
          # Disable EC2 metadata calls in CI
          AWS_EC2_METADATA_DISABLED: "true"
          
          # Database config
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/filedb
          SPRING_DATASOURCE_USERNAME: fileuser
          SPRING_DATASOURCE_PASSWORD: testpassword
          
          # Dummy AWS creds for SDK (if tests require AWS SDK init)
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_REGION: us-east-1
          
          # Optional: If using LocalStack for S3 tests
          # AWS_ENDPOINT_OVERRIDE: http://localhost:4566
        run: |
          ./gradlew clean test integrationTest --no-daemon --stacktrace

      # ===== Test Results =====
      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            **/build/test-results/test/**/*.xml
            **/build/test-results/integrationTest/**/*.xml

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            build/reports/tests/
            build/test-results/

      # ===== Build Artifact =====
      - name: Build JAR
        if: success()
        run: ./gradlew bootJar --no-daemon

      - name: Upload JAR artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: build/libs/*.jar
          retention-days: 7

  # Optional: Build Docker image on main branch
  build-docker-image:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: file-system-app:ci-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          push: false
          tags: file-system-frontend:ci-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Optional: Frontend linting and tests
  frontend-checks:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        working-directory: ./client
        run: npm ci

      - name: Run linter
        working-directory: ./client
        run: npm run lint

      - name: Run type check
        working-directory: ./client
        run: npm run type-check

      - name: Run tests
        working-directory: ./client
        run: npm run test:ci

      - name: Build frontend
        working-directory: ./client
        run: npm run build

      - name: Upload frontend build
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: client/dist/
          retention-days: 7
